name: Build, Push, and Deploy to VPS

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  REPO_OWNER_LOWER: ${{ github.repository_owner }}
  SERVER_IMAGE_NAME: "restaurant-server"
  CLIENT_IMAGE_NAME: "restaurant-client"

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert repository owner to lowercase
        run: echo "REPO_OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push server image
        uses: docker/build-push-action@v4
        with:
          context: ./server
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.SERVER_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.SERVER_IMAGE_NAME }}:${{ github.sha }}

      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.CLIENT_IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/${{ env.CLIENT_IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: self-hosted
    needs: build-and-push-images

    permissions:
      contents: read
      packages: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert repository owner to lowercase
        run: echo "REPO_OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create production docker-compose.yml
        run: |
          cat > docker-compose.prod.yml << 'EOF'
          version: "3.8"
          
          services:
            postgres:
              image: postgres:15
              container_name: restaurant_db
              environment:
                POSTGRES_USER: tkd_desarrollo
                POSTGRES_PASSWORD: Dkubi2025+
                POSTGRES_DB: restaurant
              ports:
                - "5432:5432"
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - app-network
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
                interval: 5s
                timeout: 5s
                retries: 10
          
            server:
              image: ghcr.io/${{ env.REPO_OWNER_LOWER }}/restaurant-server:latest
              container_name: restaurant_server
              environment:
                DATABASE_URL: "postgresql://tkd_desarrollo:Dkubi2025+@postgres:5432/restaurant"
                JWT_SECRET: "tu_jwt_secret_super_secreto"
                JWT_EXPIRE: "7d"
                PORT: 3000
                RATE_LIMIT_WINDOW_MS: 900000
                RATE_LIMIT_MAX: 100
              ports:
                - "3001:3000"
              command: sh -c "npx prisma migrate deploy && node dist/server.js"
              depends_on:
                postgres:
                  condition: service_healthy
              networks:
                - app-network
          
            client:
              image: ghcr.io/${{ env.REPO_OWNER_LOWER }}/restaurant-client:latest
              container_name: restaurant_client
              environment:
                VITE_URL_SERVER: http://server:3000
              ports:
                - "4174:4173"
              depends_on:
                - server
              networks:
                - app-network
          
          volumes:
            postgres_data:
          
          networks:
            app-network:
              driver: bridge
          EOF

      - name: Stop existing containers
        run: |
          docker-compose -f docker-compose.prod.yml down || true

      - name: Pull latest images
        run: |
          docker pull ghcr.io/${{ env.REPO_OWNER_LOWER }}/restaurant-server:latest
          docker pull ghcr.io/${{ env.REPO_OWNER_LOWER }}/restaurant-client:latest

      - name: Deploy with Docker Compose
        run: |
          docker-compose -f docker-compose.prod.yml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 30

      - name: Check service status
        run: |
          docker-compose -f docker-compose.prod.yml ps
